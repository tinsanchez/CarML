df.na[df.na$class=="hunter" & df.na$weapon2=="none" ,]$speed
df.na[df.na$class=="hunter" & df.na$weapon2=="none" & df.na$speed!= 'NA' ,]$speed
df.na[df.na$class=="hunter" & df.na$weapon2=="none" & is.na(df.na$speed) ,]$speed
df.na[df.na$class=="hunter" & df.na$weapon2=="none" & is.na(df.na$speed)==FALSE ,]$speed
df[df$class=="hunter" & df$weapon2=="none",]$speed = df[df$class=="hunter" & df$weapon2=="none",]$speed + 65
df.na = as.data.frame(lapply(df, function(cc) cc[ sample(c(TRUE, NA), prob = c(0.98, 0.02), size = length(cc), replace = TRUE) ]))
write.table(df, "souls.txt", sep="\t")
df[df$class=="hunter" & df$weapon2=="bell",]$speed = df[df$class=="hunter" & df$weapon2=="bell",]$speed + 85
df.na = as.data.frame(lapply(df, function(cc) cc[ sample(c(TRUE, NA), prob = c(0.98, 0.02), size = length(cc), replace = TRUE) ]))
write.table(df, "souls.txt", sep="\t")
write.table(df.na, "souls.txt", sep="\t")
df[df$class=="hunter",]$speed = df[df$class=="hunter",]$speed + 15
df.na = as.data.frame(lapply(df, function(cc) cc[ sample(c(TRUE, NA), prob = c(0.98, 0.02), size = length(cc), replace = TRUE) ]))
write.table(df.na, "souls.txt", sep="\t")
install.packages("~/Downloads/IntervalosMatesII.tar", repos = NULL)
install.packages("~/Downloads/IntervalosMatesII/IntervalosMatesII.Rproj", repos = NULL)
install.packages("~/Downloads/IntervalosMatesII.tar.gz", repos = NULL)
install.packages("~/Downloads/IntervalosMatesII.tar.gz", repos = NULL, type = "source")
install.packages(c("boot", "chron", "class", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "DEoptimR", "digest", "epitools", "evaluate", "fields", "foreign", "formatR", "geosphere", "ggmap", "ggplot2", "gtable", "highr", "httr", "kernlab", "knitr", "lattice", "maps", "maptools", "MASS", "Matrix", "mclust", "mgcv", "mime", "mnormt", "munsell", "mvtnorm", "nlme", "NLP", "nnet", "plotrix", "plyr", "proto", "psych", "R6", "Rcpp", "RCurl", "reshape2", "RgoogleMaps", "rmarkdown", "robustbase", "RSQLite", "rworldmap", "scales", "shiny", "sp", "spam", "spatial", "stringi", "stringr", "survival", "tibble", "tm", "XML", "xtable", "yaml", "zoo"))
install.packages(c("curl", "data.table"))
xi = c(1,2,3,4,5,6,7,8,9,10,11,12)
ni = c(227,123,72,42,21,31,11,14,6,4,7,28)
xi*ni
sum(xi*ni)
sum(ni)
sum(ni)/sum(xi*ni)
p=sum(ni)/sum(xi*ni)
dgeom(1,p)
dgeom(0,p)
sum(ni)*dgeom(0,p)
sum(ni)*dgeom(1,p)
sum(ni)*dgeom(2,p)
sum(ni)*dgeom(3,p)
sum(ni)*dgeom(4,p)
sum(ni)*dgeom(5,p)
sum(ni)*dgeom(6,p)
sum(ni)*dgeom(7,p)
sum(ni)*dgeom(8,p)
sum(ni)*dgeom(9,p)
sum(ni)*dgeom(10,p)
sum(ni)*dgeom(11,p)
sum(ni)*(1-sum(dgeom(xi-1,p)))
sum(ni)*(dgeom(xi-1,p)))
sum(ni)*(dgeom(xi-1,p))
sum(ni)*(dgeom(xi[1:length(xi)-1]-1,p))
sum(ni)*(c(dgeom(xi[1:length(xi)-1]-1,p),1-sum(dgeom(xi-1,p)))
)
sum(ni)*(c(dgeom(xi[1:length(xi)-1]-1,p),1-sum(dgeom(xi-1,p))))
ei=sum(ni)*(c(dgeom(xi[1:length(xi)-1]-1,p),1-sum(dgeom(xi-1,p))))
ei=sum(ni)*(c(dgeom(xi[1:length(xi)-2]-1,p),1-sum(dgeom(xi-1,p))))
ei=sum(ni)*(c(dgeom(xi[1:length(xi)-1]-1,p),1-sum(dgeom(xi-1,p))))
)
ei=sum(ni)*(c(dgeom(xi[1:length(xi)-2]-1,p),1-sum(dgeom(xi-1,p))))
ei=sum(ni)*(c(dgeom(xi[1:length(xi)-1]-1,p),1-sum(dgeom(xi-1,p))))
)
ei=sum(ni)*(c(dgeom(xi[1:10]-1,p),1-sum(dgeom(xi[1:10]-1,p))))
ei
dgeom(xi[1:10]-1,p)
sum(ei)
ei
ni
oi = c(ni[1:10], sum(ni[11:12]))
oi
oi-ei
sum((oi-ei)^2/ei)
pi = (c(dgeom(xi[1:10]-1,p),1-sum(dgeom(xi[1:10]-1,p))))
sum(pi)
chisq.test(oi, p=pi)
df = data.frame(od=c(70.14,51.53,64.89,66.14,77.83,57.90,75.23,78.97,87.30,51.08,69.77,73.87),hp=c(68.49,86.06,92.55,71.70,83.58,77.83,82.78,75.91,87.39,85.30,81.13,84.44), gp=c(59.29,66.51,58.47,75.01,69.19,63.85,64.29,58.60,55.91,71.98,67.82,57.27))
View(df)
aggregate(df,sum)
aggregate(x = df, FUN = sum)
sum(df$od)
mean(df$od)
mean(df$hp)
mean(df$gp)
sum(df$gp)
sum(df$hp)
sum(df)
mean(df)
sum(df)/12
pf(q = 16.21, df1=14, df2=14)
1-pf(q = 16.21, df1=14, df2=14)
s1=1.57
s2=0.39
n1=15
n2=15
(s1^2/n1+s2^2/n2)^2/((1/(n1-1)*(s1^2/n1)^2)+(1/(n2-1)*(s2^2/n2)^2))-2
x1=3.5
x2=0.7
(x1-x2)/sqrt(s1^2/n1+s2^2/n2)
2*(1-pt(6.703503, df = 13))
data.frame(x=c(2,8,3), y=c(17,10,14), z=c(11,25,5))
df=data.frame(x=c(2,8,3), y=c(17,10,14), z=c(11,25,5))
addmargins(df)
addmargins(df, margin = c(1,2))
datos = as.table(matrix(c(2,17,11,8,10,25,3,14,5),nrow = 3, byrow = T))
datos
chisq.test(datos)
datos = as.table(matrix(c(50,19,17,21,69,47,56,37,33,23,18,21),nrow = 3, byrow = T))
datos
chisq.test(datos)
library(pwr)
library("pwr")
install.packages("pwr")
library(pwr)
pwr.chisq.test(N=200,sig.level = 0.1, w=sqrt(16.56^2/200),df=6)
chisq.test(datos)
qchisq(16.56, df=6)
dchisq(16.56, df=6)
pchisq(16.56, df=6)
pchisq(16.56, df=20)
1-pchisq(16.56, df=20)
pwr.chisq.test(N=200,sig.level = 0.1, w=sqrt(16.56^2/200),df=20)
pwr.chisq.test(N=200,sig.level = 0.1, w=sqrt(16.56/200),df=20)
marcas = c(rep(1,7),rep(3,17), rep(5,39), rep(7,27), rep(9,10))
media = mean(marcas)
media
sd(marcas)
sd(marcas)*99/100
sd(marcas)*100/99
sqrt(sd(marcas)*sd(marcas)*99/100)
desv.tip=sqrt(sd(marcas)*sd(marcas)*99/100)
chisq.test(marcas, p=pnorm(c(2,4,6,8,Inf),media,desv.tip)-pnorm(c(-Inf,0,2,4,6,8),media,desv.tip))
chisq.test(marcas, p=pnorm(c(2,4,6,8,Inf),media,desv.tip)-pnorm(c(-Inf,2,4,6,8),media,desv.tip))
chisq.test(table(marcas), p=pnorm(c(2,4,6,8,Inf),media,desv.tip)-pnorm(c(-Inf,2,4,6,8),media,desv.tip))
dades=matrix(c(0.8,1.3,0.8,1.8,1.0,0.9,1.1,
0.1,1.1,1.6,1.4,0.6,1.5,0.1,2,2.1,1.5,2.3,1.8,
1.8,2.3,0.5,0.3,2.2,1,2.5,2,0.5,2,1.5,2.5,1,
0.5,0.5,1,2), nrow=18,byrow=TRUE)
cent=matrix(c(0.5,0,0.5,1.5,0.5,3),
nrow=3,byrow=TRUE)
dades
cent
kmeans(dades, cent)
kmeans(dades, cent,algorithm="Lloyd")
km=kmeans(dades, cent,algorithm="Lloyd")
km$cluster
km$centers
km$totss
km=kmeans(dades, 3,algorithm="Lloyd")
km
km=kmeans(dades, 3,algorithm="Lloyd")
km
plot(dades, col=km$cluster)
plot(dades, col=km$cluster, pch=19)
?predict
dades
dist(dades)
dist(dades, method = "euclidean")
dist(dades, method = "euclidean")
dist(dades, method = "euclidean")
hclust(dades, method = "euclidean")
hclust(dades, method = "single")
hclust(dades)
hclust(dades, method = "ward")
hclust(dades, method = "ward"dades=matrix(data=c(0.8,1.8,1.1,1.6, 0.8,1.3,
1.0,0.9,1.4, 0.6,1.5, 0.1,1.1,0.1),
nrow=7,byrow=TRUE))
dades=matrix(data=c(0.8,1.8,1.1,1.6, 0.8,1.3,
1.0,0.9,1.4, 0.6,1.5, 0.1,1.1,0.1),
nrow=7,byrow=TRUE)
dades
plot(dades)
plot(dades)
dist(dades,method="euclidean")
distancies = dist(dades,method="euclidean")
hclust(distances, method = "single")
hclust(distancies, method = "single")
hc=hclust(distancies, method = "single")
hc$merge
hc$height
plot(clust)
plot(hc)
plot(hc, hang = -1)
plot(hc, hang = -8)
plot(hc, hang = -9)
plot(hc, hang = 1)
plot(hc, hang = 0)
plot(hc, hang = 1)
plot(hc, hang = -1)
plot(hc, hang = 0)
plot(hc)
dades
dades=matrix(data=c(168,72, 162, 67, 160, 50, 167, 69, 159, 52, 168, 75, 166, 61),
nrow=7,byrow=TRUE)
dades
plot(dades)
dist(dades, method="euclidean")
dist=dist(dades, method="euclidean")
dist
dist
clust = hclust(dist, method = "single")
clust$merge
clust$height
names = c("A","B","C","D","E","F","G")
plot(clust, names)
plot(clust, names, hang = 0)
plot(clust, names, hang = 1)
plot(clust, names, hang = 2)
plot(clust, names, hang = 3)
plot(clust, names, hang = 4)
plot(clust, names, hang = -1)
plot(clust, names, hang = -2)
plot(hclust(dist(dades,method="euclidean"), method="single"), labels = names, hang = -1)
plot(hclust(dist(dades,method="euclidean"), method="single"), labels = names, hang = -1, main="La clase de primero")
plot(hclust(dist(dades,method="euclidean"), method="single"), labels = names, hang = -1, main="La clase de primero")
plot(dades, col=kmeans(dades, 3)$cluster, pch=19)
plot(dades, col=kmeans(dades, 2)$cluster, pch=19)
plot(dades, col=kmeans(dades, 3)$cluster, pch=19)
plot(dades, col=kmeans(dades, 4)$cluster, pch=19)
plot(dades, col=kmeans(dades, 5)$cluster, pch=19)
View(dades)
var1=c(1,2,3)
var2=c(2,8,10)
data.frame(var1,var2)
df=data.frame(var1,var2)
plot(df)
plot(df, col=kmeans(df, 2)$cluster, pch=19)
dades
for (i in 2:7) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
wss <- (nrow(dades)-1)*sum(apply(dades,2,var))
wss
for (i in 2:7) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
dades
for (i in 2:4) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
for (i in 2:6) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
for (i in 2:7) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
for (i in 2:6) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
wss
wss
wss=0
for (i in 2:6) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
wss
for (i in 1:6) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
wss
sum(kmeans(dades, centers=1)$withinss)
nrow(dades)
for (i in 1:nrow(dades)) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
for (i in 1:nrow(dades)-1) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
for (i in 1:(nrow(dades)-1)) wss[i]<-sum(kmeans(dades, centers=i)$withinss)
for(i in 1:(nrow(dades)-1))
wss[i]<-kmeans(dades,i)$tot.withinss
wss
plot(i:(nrow(dades)-1), wss)
wss
plot(1:(nrow(dades)-1), wss)
plot(1:(nrow(dades)-1), wss, type='b')
kmeans(dades,2)
plot(dades, col=kmeans(dades,2), pch=19)
plot(dades, col=kmeans(dades,2)$cluster, pch=19)
names = c("Pol", "María", "Joana C", "Joana S", "Xavi", "Toni T", "Jesús", "Cristian", "Marta", "Sáhara", "Ítria")
altures = c(175,158, 168, 168, 174, 185, 183, 176, 165, 160, 170)
pes = c(75, 50, 60, 46, 65, 74, 80, 80, 63, 64, 54)
df = data.frame(altures, pes)
plot(df)
km=kmeans(df, 2)
plot(df, col = km$cluster, pch = 19)
plot(df, col = kmeans(df,3)$cluster, pch = 19)
plot(df, col = kmeans(df,3)$cluster, pch = 19)
plot(df, col = kmeans(df,3)$cluster, pch = 19)
plot(df, col = kmeans(df,3)$cluster, pch = 19)
plot(df, col = kmeans(df,3)$cluster, pch = 19)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
for(i in 1:(nrow(df)-1)) wss[i] = kmeans(df,i)$tot.withinss
wss
plot(1:(nrow(df)-1), wss)
plot(1:(nrow(df)-1), wss, type='b')
plot(df, col = kmeans(df,3)$cluster, pch = 19)
plot(df)
dist = dist(df, method = "euclidean")
dist
clust = hclust(dist, method = "single")
clust
plot(clust, labels = names)
plot(clust, labels = names, hang = -1)
plot(clust, labels = names, hang = 1)
plot(clust, labels = names, hang = 2)
plot(clust, labels = names, hang = 3)
plot(clust, labels = names, hang = 0)
plot(clust, labels = names, hang = -1)
altures = c(175,158, 168, 168, 174, 185, 183, 176, 165, 160, 170, 154, 165, 170, 165, 183, 174)
pes = c(75, 50, 60, 46, 65, 74, 80, 80, 63, 64, 54, 65, 56, 65, 75, 86, 84)
names = c("Pol", "María", "Joana C", "Joana S", "Xavi", "Toni T", "Jesús", "Cristian", "Marta", "Sáhara", "Ítria", "Mª Teresa", "Àngela", "Raúl", "Jesus", "Marc", "Yun")
dist = dist(df, method = "euclidean")
dist
df = data.frame(altures, pes)
dist = dist(df, method = "euclidean")
dist
clust = hclust(dist, method = "single")
clust
plot(clust, labels = names, hang = -1)
plot(clust, labels = names)
plot(df, col = kmeans(df,3)$cluster, pch = 19)
for(i in 1:(nrow(df)-1)) wss[i] = kmeans(df,i)$tot.withinss
plot(1:(nrow(df)-1), wss, type='b')
plot(df, col = kmeans(df,4)$cluster, pch = 19)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
plot(clust, labels = names)
plot(df, col = kmeans(df,4)$cluster, pch = 19)
return pi.est
needle=function(x)
{
a <- 1 # length of needle
L <- 1 # distance between lines
n <- 100000 # number of dropped needles
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
return pi.est
}
needle=function(x)
{
a <- 1 # length of needle
L <- 1 # distance between lines
n <- 100000 # number of dropped needles
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
return pi.est
}
needle=function(x)
{
a <- 1 # length of needle
L <- 1 # distance between lines
n <- 100000 # number of dropped needles
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
return pi.est
}
pi.est <- (2.0*n)/(hit)
needle=function(x)
{
a <- 1 # length of needle
L <- 1 # distance between lines
n <- 100000 # number of dropped needles
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (2.0*n)/(hit)
return pi.est
}
dpois(x(1:10),0.3)
dpois(c(1:10),0.3)
400*dpois(c(1:10),0.3)
sum(dpois(c(1:10),0.3))
sum(dpois(c(1:10),3))
s=sum(dpois(c(1:10),3))
dpois(c(1:10,1-s),3)
dpois(c(c(1:10),1-s),3)
dpois(c(1:10),0.3)
c(dpois(c(1:10),0.3),1-s)
all=c(dpois(c(1:10),0.3),1-s)
sum(all)
all=c(dpois(c(1:10),3),1-s)
sum(all)
s=sum(dpois(c(0:9),3))
all=c(dpois(c(0:9),3),1-s)
all
sum(all)
s=sum(dpois(c(1:10),3))
all=c(dpois(c(1:10),3),1-s)
s=sum(dpois(c(1:9),4))
all=c(dpois(c(1:9),4),1-s)
all
sum(all)
400*all
round(400*all,0)
sum(round(400*all,0))
total=round(400*all,0)
total
total[10]=10
total
mean(total)
sum(total*c(1:10))/400
notes = c(7.5, 8.5, 5.5, 9, 7,6,4.5,5,9.5,4,5,2)
discreta=factor(x=rep(1:3,each=4),labels=c("Matemàtiques", "Telemàtica", "Informàtica")
semillas=data.frame(peso,abono)
carreres=factor(x=rep(1:3,each=4),labels=c("Matemàtiques", "Telemàtica", "Informàtica")
semillas=data.frame(peso,abono)
carreres=factor(x=rep(1:3,each=4),labels=c("Matematiques", "Telematica", "Informatica")
semillas=data.frame(peso,abono)
carreres=factor(x=rep(1:3,each=4),labels=c("Matematiques", "Telematica", "Informatica"))
carreres
carreres=factor(x=rep(1:3,each=4),labels=c("Matemàtiques", "Telemàtica", "Informàtica"))
carreres
discreta=data.frame(notes,carreres)
discreta
summary(aov(notes~carreres))
head(aov(notes~carreres))
head(discreta)
aggregate(notes~carreres,data=discreta,sum)
aggregate(notes~carreres,data=discreta,mean)
sum(discreta$notes)
mean(discreta$notes)
sum(discreta$notes^2)
bartlett.test(discreta$notes~discreta$carreres)
pairwise.t.test(discreta$notes,discreta$carreres,p.adjust.method="holm")
pairwise.t.test(discreta$notes,discreta$carreres,p.adjust.method="none")
pairwise.t.test(discreta$notes,discreta$carreres,p.adjust.method="bonferroni")
s=sum(dpois(c(1:9),4))
s=sum(dpois(c(1:9),4))
all=c(dpois(c(1:9),4),1-s)
total = round(400*all,0)
total[10]=10
fitdistr(x = total, densfun = "poisson")
library(MASS)
fitdistr(x = total, densfun = "poisson")
chi=chisq.test(total, p=all)
chi$df
chi
chi$statistic
chi$parameter
dchisq( chi$statistic,  chi$parameter-1)
pchisq( chi$statistic,  chi$parameter-1)
1-pchisq( chi$statistic,  chi$parameter-1)
(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
rnorm(9,mean = 0, sd = 0.005)
dp=dp+c(rep(c(1,-1),5))
altures = c(175,158, 168, 168, 174, 185)
pesos = c(75, 50, 60, 46, 65, 74)
noms = c("M.Pol", "M.Santos", "J.Cáceres", "J.Sureda", "X.Gallego", "T.Torner")
df = data.frame(noms,altures, pesos)
df
df = data.frame(altures, pesos)
colnames(df) = noms
df
colnames(df)
rownames(df) = noms
df
dist = dist(df, method = "euclidean")
dist
install.packages(c("backports", "curl", "devtools", "fields", "flexmix", "foreign", "formatR", "htmltools", "jsonlite", "knitr", "Matrix", "mclust", "plotrix", "psych", "R6", "Rcpp", "rmarkdown", "shiny", "tibble", "XML"))
dp=dpois(c(1:9),4)+abs(rnorm(9,mean = 0, sd = 0.003))
p
s=sum(dp)
all=c(dp,1-s)
total = round(400*all,0)
total = total + c(rep(c(3,-3),4),0,0)
total[10]=400-sum(total[1:9])
total
setwd("~/Desktop/cars")
cars = read.csv("cars.csv")
summary(cars)
cars = data.frame(modelo = cars$modelo,extras = cars$extras, kilometraje = cars$kilometraje, estado = cars$estado, precio = cars$precio )
summary(cars)
write.csv(cars)
write.csv(cars,"new_cars.csv")
